import { SignatureParamsG1 } from './params';
import { VerifyResult } from '@docknetwork/crypto-wasm';
import { BBSPlusPublicKeyG2, BBSPlusSecretKey } from './keys';
import { BytearrayWrapper } from '../bytearray-wrapper';
export declare abstract class Signature extends BytearrayWrapper {
    static readonly maxEncodedLength = 32;
    static readonly textEncoder: TextEncoder;
    static readonly textDecoder: TextDecoder;
    /**
     * This is an irreversible encoding as a hash function is used to convert a message of
     * arbitrary length to a fixed length encoding.
     * @param message
     */
    static encodeMessageForSigning(message: Uint8Array): Uint8Array;
    /**
     * Encodes a positive safe integer, i.e. of 53 bits
     * @param num
     */
    static encodePositiveNumberForSigning(num: number): Uint8Array;
    /**
     * Encode the given string to bytes and create a field element by considering the bytes in little-endian format.
     * Use this way of encoding only if the input string's UTF-8 representation is <= 32 bytes else this will throw an error.
     * Also adds trailing 0s to the bytes to make the size 32 bytes so use this function carefully. The only place this is
     * currently useful is verifiable encryption as in some cases the prover might not be willing/available at the time of
     * decryption and thus the decryptor must be able to decrypt it independently. This is different from selective disclosure
     * where the verifier can check that the revealed message is same as the encoded one before even verifying the proof.
     * @param message - utf-8 string of at most 32 bytes
     * @param compress - whether to compress the text before encoding to bytes. Compression might not always help as things
     * like public keys, DIDs, UUIDs, etc. are designed to be random and thus won't be compressed
     */
    static reversibleEncodeStringForSigning(message: string, compress?: boolean): Uint8Array;
    /**
     * Decode the given representation. This should **only** be used when the encoding was done
     * using `this.reversibleEncodeStringMessageForSigning`. Also, this function trims any characters from the first
     * occurrence of a null characters (UTF-16 code unit 0) so if the encoded (using `this.reversibleEncodeStringMessageForSigning`)
     * string also had a null then the decoded string will be different from it.
     * @param message
     * @param decompress - whether to decompress the bytes before converting to a string
     */
    static reversibleDecodeStringForSigning(message: Uint8Array, decompress?: boolean): string;
}
export declare class SignatureG1 extends Signature {
    /**
     * Signer creates a new signature
     * @param messages - Ordered list of messages. Order and contents should be kept same for both signer and verifier
     * @param secretKey
     * @param params
     * @param encodeMessages - If true, the messages are encoded as field elements otherwise they are assumed to be already encoded.
     */
    static generate(messages: Uint8Array[], secretKey: BBSPlusSecretKey, params: SignatureParamsG1, encodeMessages: boolean): SignatureG1;
    /**
     * Verify the signature
     * @param messages - Ordered list of messages. Order and contents should be kept same for both signer and verifier
     * @param publicKey
     * @param params
     * @param encodeMessages - If true, the messages are encoded as field elements otherwise they are assumed to be already encoded.
     */
    verify(messages: Uint8Array[], publicKey: BBSPlusPublicKeyG2, params: SignatureParamsG1, encodeMessages: boolean): VerifyResult;
}
export declare abstract class BlindSignature extends BytearrayWrapper {
    /**
     * Generate blinding for creating the commitment used in the request for blind signature
     * @param seed - Optional seed to serve as entropy for the blinding.
     */
    static generateBlinding(seed?: Uint8Array): Uint8Array;
}
export declare class BlindSignatureG1 extends BlindSignature {
    /**
     * Generates a blind signature over the commitment of unknown messages and known messages
     * @param commitment - Commitment over unknown messages sent by the requester of the blind signature. Its assumed that
     * the signers has verified the knowledge of committed messages
     * @param knownMessages
     * @param secretKey
     * @param params
     * @param encodeMessages
     */
    static generate(commitment: Uint8Array, knownMessages: Map<number, Uint8Array>, secretKey: BBSPlusSecretKey, params: SignatureParamsG1, encodeMessages: boolean): BlindSignatureG1;
    /**
     * Unblind the blind signature to get a regular signature that can be verified
     * @param blinding
     */
    unblind(blinding: Uint8Array): SignatureG1;
    /**
     * Generate a request for a blind signature
     * @param messagesToBlind - messages the requester wants to hide from the signer. The key of the map is the index of the
     * message as per the params.
     * @param params
     * @param encodeMessages
     * @param blinding - If not provided, a random blinding is generated
     * @param unblindedMessages - Any messages that the requester wishes to inform the signer about. This is for informational
     * purpose only and has no cryptographic use.
     */
    static generateRequest(messagesToBlind: Map<number, Uint8Array>, params: SignatureParamsG1, encodeMessages: boolean, blinding?: Uint8Array, unblindedMessages?: Map<number, Uint8Array>): [Uint8Array, BlindSignatureRequest];
}
/**
 * Structure to send to the signer to request a blind signature
 */
export interface BlindSignatureRequest {
    /**
     * The commitment to the blinded messages
     */
    commitment: Uint8Array;
    /**
     * The messages at these indices were committed to in the commitment and are not revealed to the signer. This is expected
     * to be sorted in ascending order
     */
    blindedIndices: number[];
    /**
     * The messages which are known to the signer. Here the key is message index (as per the `SignatureParams`). This is not
     * mandatory as the signer might already know the messages to sign. This is used when the requester wants to inform the
     * signer of some or all of the message
     */
    unblindedMessages?: Map<number, Uint8Array>;
}
//# sourceMappingURL=signature.d.ts.map