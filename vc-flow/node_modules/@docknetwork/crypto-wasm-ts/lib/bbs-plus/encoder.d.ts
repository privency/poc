/**
 * A function that encodes the input to field element bytes
 */
export declare type EncodeFunc = (value: unknown) => Uint8Array;
/**
 * A function that encodes the input to a positive integer
 */
export declare type ToPositiveIntFunc = (value: unknown) => number;
/**
 * Encodes the input to a field element for signing with BBS+ in group G1.
 * Used when working with messages that are specified as JS objects. This encoder object will contain
 * the mapping from message name (key in JS object) to an encoding function.
 *
 * TODO: Support identity encoder for values that are already field elements.
 */
export declare class Encoder {
    encoders?: Map<string, EncodeFunc>;
    defaultEncoder?: EncodeFunc;
    constructor(encoders?: Map<string, EncodeFunc>, defaultEncoder?: EncodeFunc);
    /**
     * Encode a message with given name and value. Will throw an error if no appropriate encoder found.
     * @param name
     * @param value
     * @param strict - If set to false and no appropriate encoder is found but the value is a bytearray, it will encode it using the built-in mechanism
     */
    encodeMessage(name: string, value: unknown, strict?: boolean): Uint8Array;
    /**
     * Encode messages given as JS object. It flattens the object into a sorted list and encodes each value as per the known
     * encoding functions Returns 2 arrays, 1st with message names and 2nd with encoded values.
     * @param messages
     * @param strict - If set to false and no appropriate encoder is found but the value is a bytearray, it will encode it using the built-in mechanism
     */
    encodeMessageObject(messages: object, strict?: boolean): [string[], Uint8Array[]];
    encodeDefault(value: unknown, strict?: boolean): Uint8Array;
    /**
     * Returns an encoding function to be used on a message that is a positive integer.
     */
    static positiveIntegerEncoder(): EncodeFunc;
    /**
     * Returns a function that can convert any input integer to a positive integer when its minimum
     * negative value is known. Does that by adding an offset of abs(minimum) to the input
     * @param minimum
     */
    static integerToPositiveInt(minimum: number): ToPositiveIntFunc;
    /**
     * Returns an encoding function to be used on a message that can be a positive or negative integer.
     * @param minimum - The minimum negative value that the message can take
     */
    static integerEncoder(minimum: number): EncodeFunc;
    /**
     * Returns a function that can convert any positive number to a positive integer when its maximum decimal
     * places are known. Does that by multiplying it by 10^max_decimal_places, eg. 23.452 -> 23452
     * @param maxDecimalPlaces
     */
    static positiveDecimalNumberToPositiveInt(maxDecimalPlaces: number): ToPositiveIntFunc;
    /**
     * Returns an encoding function to be used on a message that can be a positive decimal number, eg. 2.7
     * @param maxDecimalPlaces - The maximum decimal places
     */
    static positiveDecimalNumberEncoder(maxDecimalPlaces: number): EncodeFunc;
    /**
     * Returns a reversible encoding function to be used on a string message. The output can of the `EncodeFunc` can be
     * reversed.
     * @param compress
     */
    static reversibleEncoderString(compress?: boolean): EncodeFunc;
    /**
     * Returns a function that can convert any number to a positive integer when its minimum negative value and maximum
     * decimal places are known. Does that by adding an offset of abs(minimum) and then multiplying it by 10^max_decimal_places
     * @param minimum
     * @param maxDecimalPlaces
     */
    static decimalNumberToPositiveInt(minimum: number, maxDecimalPlaces: number): ToPositiveIntFunc;
    /**
     * Returns an encoding function to be used on a message that can be a positive, negative or decimal number, eg. -2.35
     * @param minimum - The minimum negative value that the message can take
     * @param maxDecimalPlaces - The maximum decimal places
     */
    static decimalNumberEncoder(minimum: number, maxDecimalPlaces: number): EncodeFunc;
    /**
     * Returns an encoding function to convert utf-8 string message. It might fail of the encoding target cannot be made a string
     */
    static defaultEncodeFunc(): EncodeFunc;
    private static ensureNumber;
    private static ensureCorrectDecimalNumberPlaces;
}
//# sourceMappingURL=encoder.d.ts.map