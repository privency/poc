/**
 * Proof of knowledge of signature protocol
 */
import { SignatureG1 } from './signature';
import { SignatureParamsG1 } from './params';
import { BbsPoKSigProtocol, VerifyResult } from '@docknetwork/crypto-wasm';
import { BBSPlusPublicKeyG2 } from './keys';
import { BytearrayWrapper } from '../bytearray-wrapper';
export declare class PoKSigProtocol {
    value: BbsPoKSigProtocol;
    constructor(protocol: BbsPoKSigProtocol);
    static initialize(messages: Uint8Array[], signature: SignatureG1, params: SignatureParamsG1, encodeMessages: boolean, blindings?: Map<number, Uint8Array>, revealed?: Set<number>): PoKSigProtocol;
    generateProof(challenge: Uint8Array): PoKSigProof;
    challengeContribution(params: SignatureParamsG1, encodeMessages: boolean, revealedMsgs?: Map<number, Uint8Array>): Uint8Array;
}
export declare class PoKSigProof extends BytearrayWrapper {
    verify(challenge: Uint8Array, publicKey: BBSPlusPublicKeyG2, params: SignatureParamsG1, encodeMessages: boolean, revealedMsgs?: Map<number, Uint8Array>): VerifyResult;
    challengeContribution(params: SignatureParamsG1, encodeMessages: boolean, revealedMsgs?: Map<number, Uint8Array>): Uint8Array;
}
//# sourceMappingURL=proof.d.ts.map