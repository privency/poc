"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlindSignatureG1 = exports.BlindSignature = exports.SignatureG1 = exports.Signature = void 0;
const crypto_wasm_1 = require("@docknetwork/crypto-wasm");
const bytearray_wrapper_1 = require("../bytearray-wrapper");
const lzutf8_1 = __importDefault(require("lzutf8"));
class Signature extends bytearray_wrapper_1.BytearrayWrapper {
    /**
     * This is an irreversible encoding as a hash function is used to convert a message of
     * arbitrary length to a fixed length encoding.
     * @param message
     */
    static encodeMessageForSigning(message) {
        return (0, crypto_wasm_1.bbsEncodeMessageForSigning)(message);
    }
    /**
     * Encodes a positive safe integer, i.e. of 53 bits
     * @param num
     */
    static encodePositiveNumberForSigning(num) {
        return (0, crypto_wasm_1.generateFieldElementFromNumber)(num);
    }
    /**
     * Encode the given string to bytes and create a field element by considering the bytes in little-endian format.
     * Use this way of encoding only if the input string's UTF-8 representation is <= 32 bytes else this will throw an error.
     * Also adds trailing 0s to the bytes to make the size 32 bytes so use this function carefully. The only place this is
     * currently useful is verifiable encryption as in some cases the prover might not be willing/available at the time of
     * decryption and thus the decryptor must be able to decrypt it independently. This is different from selective disclosure
     * where the verifier can check that the revealed message is same as the encoded one before even verifying the proof.
     * @param message - utf-8 string of at most 32 bytes
     * @param compress - whether to compress the text before encoding to bytes. Compression might not always help as things
     * like public keys, DIDs, UUIDs, etc. are designed to be random and thus won't be compressed
     */
    static reversibleEncodeStringForSigning(message, compress = false) {
        const bytes = compress ? lzutf8_1.default.compress(message) : Signature.textEncoder.encode(message);
        if (bytes.length > Signature.maxEncodedLength) {
            throw new Error(`Expects a string with at most ${Signature.maxEncodedLength} bytes`);
        }
        // Create a little-endian representation
        const fieldElementBytes = new Uint8Array(Signature.maxEncodedLength);
        fieldElementBytes.set(bytes);
        fieldElementBytes.set(new Uint8Array(Signature.maxEncodedLength - bytes.length), bytes.length);
        return (0, crypto_wasm_1.fieldElementAsBytes)(fieldElementBytes, true);
    }
    /**
     * Decode the given representation. This should **only** be used when the encoding was done
     * using `this.reversibleEncodeStringMessageForSigning`. Also, this function trims any characters from the first
     * occurrence of a null characters (UTF-16 code unit 0) so if the encoded (using `this.reversibleEncodeStringMessageForSigning`)
     * string also had a null then the decoded string will be different from it.
     * @param message
     * @param decompress - whether to decompress the bytes before converting to a string
     */
    static reversibleDecodeStringForSigning(message, decompress = false) {
        if (message.length > Signature.maxEncodedLength) {
            throw new Error(`Expects a message with at most ${Signature.maxEncodedLength} bytes`);
        }
        if (decompress) {
            const strippedMsg = message.slice(0, message.indexOf(0));
            const str = lzutf8_1.default.decompress(strippedMsg);
            if (str.length > Signature.maxEncodedLength) {
                throw new Error(`Expects a message that can be decompressed to at most ${Signature.maxEncodedLength} bytes but decompressed size was ${str.length}`);
            }
            return str;
        }
        else {
            const decoded = Signature.textDecoder.decode(message);
            const chars = [];
            for (let i = 0; i < Signature.maxEncodedLength; i++) {
                // If a null character found then stop looking further
                if (decoded.charCodeAt(i) == 0) {
                    break;
                }
                chars.push(decoded.charAt(i));
            }
            return chars.join('');
        }
    }
}
exports.Signature = Signature;
// The field element size is 32 bytes so the maximum byte size of encoded message must be 32.
Signature.maxEncodedLength = 32;
Signature.textEncoder = new TextEncoder();
Signature.textDecoder = new TextDecoder();
class SignatureG1 extends Signature {
    /**
     * Signer creates a new signature
     * @param messages - Ordered list of messages. Order and contents should be kept same for both signer and verifier
     * @param secretKey
     * @param params
     * @param encodeMessages - If true, the messages are encoded as field elements otherwise they are assumed to be already encoded.
     */
    static generate(messages, secretKey, params, encodeMessages) {
        if (messages.length !== params.supportedMessageCount()) {
            throw new Error(`Number of messages ${messages.length} is different from ${params.supportedMessageCount()} supported by the signature params`);
        }
        const sig = (0, crypto_wasm_1.bbsSignG1)(messages, secretKey.value, params.value, encodeMessages);
        return new SignatureG1(sig);
    }
    /**
     * Verify the signature
     * @param messages - Ordered list of messages. Order and contents should be kept same for both signer and verifier
     * @param publicKey
     * @param params
     * @param encodeMessages - If true, the messages are encoded as field elements otherwise they are assumed to be already encoded.
     */
    verify(messages, publicKey, params, encodeMessages) {
        if (messages.length !== params.supportedMessageCount()) {
            throw new Error(`Number of messages ${messages.length} is different from ${params.supportedMessageCount()} supported by the signature params`);
        }
        return (0, crypto_wasm_1.bbsVerifyG1)(messages, this.value, publicKey.value, params.value, encodeMessages);
    }
}
exports.SignatureG1 = SignatureG1;
class BlindSignature extends bytearray_wrapper_1.BytearrayWrapper {
    /**
     * Generate blinding for creating the commitment used in the request for blind signature
     * @param seed - Optional seed to serve as entropy for the blinding.
     */
    static generateBlinding(seed) {
        return (0, crypto_wasm_1.generateRandomFieldElement)(seed);
    }
}
exports.BlindSignature = BlindSignature;
class BlindSignatureG1 extends BlindSignature {
    /**
     * Generates a blind signature over the commitment of unknown messages and known messages
     * @param commitment - Commitment over unknown messages sent by the requester of the blind signature. Its assumed that
     * the signers has verified the knowledge of committed messages
     * @param knownMessages
     * @param secretKey
     * @param params
     * @param encodeMessages
     */
    static generate(commitment, knownMessages, secretKey, params, encodeMessages) {
        if (knownMessages.size >= params.supportedMessageCount()) {
            throw new Error(`Number of messages ${knownMessages.size} must be less than ${params.supportedMessageCount()} supported by the signature params`);
        }
        const sig = (0, crypto_wasm_1.bbsBlindSignG1)(commitment, knownMessages, secretKey.value, params.value, encodeMessages);
        return new BlindSignatureG1(sig);
    }
    /**
     * Unblind the blind signature to get a regular signature that can be verified
     * @param blinding
     */
    unblind(blinding) {
        const sig = (0, crypto_wasm_1.bbsUnblindSigG1)(this.value, blinding);
        return new SignatureG1(sig);
    }
    /**
     * Generate a request for a blind signature
     * @param messagesToBlind - messages the requester wants to hide from the signer. The key of the map is the index of the
     * message as per the params.
     * @param params
     * @param encodeMessages
     * @param blinding - If not provided, a random blinding is generated
     * @param unblindedMessages - Any messages that the requester wishes to inform the signer about. This is for informational
     * purpose only and has no cryptographic use.
     */
    static generateRequest(messagesToBlind, params, encodeMessages, blinding, unblindedMessages) {
        const [commitment, b] = params.commitToMessages(messagesToBlind, encodeMessages, blinding);
        const blindedIndices = [];
        for (const k of messagesToBlind.keys()) {
            blindedIndices.push(k);
        }
        blindedIndices.sort();
        return [b, { commitment, blindedIndices, unblindedMessages }];
    }
}
exports.BlindSignatureG1 = BlindSignatureG1;
//# sourceMappingURL=signature.js.map