import { SignatureParamsG1, SignatureParamsG2 } from './params';
import { BytearrayWrapper } from '../bytearray-wrapper';
export declare abstract class BBSPlusPublicKey extends BytearrayWrapper {
    abstract isValid(): boolean;
}
export declare class BBSPlusPublicKeyG1 extends BBSPlusPublicKey {
    isValid(): boolean;
}
export declare class BBSPlusPublicKeyG2 extends BBSPlusPublicKey {
    isValid(): boolean;
}
export declare class BBSPlusSecretKey extends BytearrayWrapper {
    generatePublicKeyG1(params: SignatureParamsG2): BBSPlusPublicKeyG1;
    generatePublicKeyG2(params: SignatureParamsG1): BBSPlusPublicKeyG2;
}
export declare abstract class BBSPlusKeypair {
    sk: BBSPlusSecretKey;
    pk: BBSPlusPublicKey;
    constructor(sk: BBSPlusSecretKey, pk: BBSPlusPublicKey);
    get secretKey(): BBSPlusSecretKey;
    get publicKey(): BBSPlusPublicKey;
}
export declare class KeypairG1 extends BBSPlusKeypair {
    static generate(params: SignatureParamsG2, seed?: Uint8Array): KeypairG1;
}
export declare class KeypairG2 extends BBSPlusKeypair {
    static generate(params: SignatureParamsG1, seed?: Uint8Array): KeypairG2;
}
//# sourceMappingURL=keys.d.ts.map