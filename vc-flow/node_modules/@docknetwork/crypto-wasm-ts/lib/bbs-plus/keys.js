"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeypairG2 = exports.KeypairG1 = exports.BBSPlusKeypair = exports.BBSPlusSecretKey = exports.BBSPlusPublicKeyG2 = exports.BBSPlusPublicKeyG1 = exports.BBSPlusPublicKey = void 0;
const crypto_wasm_1 = require("@docknetwork/crypto-wasm");
const bytearray_wrapper_1 = require("../bytearray-wrapper");
class BBSPlusPublicKey extends bytearray_wrapper_1.BytearrayWrapper {
}
exports.BBSPlusPublicKey = BBSPlusPublicKey;
class BBSPlusPublicKeyG1 extends BBSPlusPublicKey {
    isValid() {
        return (0, crypto_wasm_1.isBBSPublicKeyG1Valid)(this.value);
    }
}
exports.BBSPlusPublicKeyG1 = BBSPlusPublicKeyG1;
class BBSPlusPublicKeyG2 extends BBSPlusPublicKey {
    isValid() {
        return (0, crypto_wasm_1.isBBSPublicKeyG2Valid)(this.value);
    }
}
exports.BBSPlusPublicKeyG2 = BBSPlusPublicKeyG2;
class BBSPlusSecretKey extends bytearray_wrapper_1.BytearrayWrapper {
    generatePublicKeyG1(params) {
        return new BBSPlusPublicKeyG1((0, crypto_wasm_1.generateBBSPublicKeyG1)(this.value, params.value));
    }
    generatePublicKeyG2(params) {
        return new BBSPlusPublicKeyG2((0, crypto_wasm_1.generateBBSPublicKeyG2)(this.value, params.value));
    }
}
exports.BBSPlusSecretKey = BBSPlusSecretKey;
class BBSPlusKeypair {
    constructor(sk, pk) {
        this.sk = sk;
        this.pk = pk;
    }
    get secretKey() {
        return this.sk;
    }
    get publicKey() {
        return this.pk;
    }
}
exports.BBSPlusKeypair = BBSPlusKeypair;
class KeypairG1 extends BBSPlusKeypair {
    static generate(params, seed) {
        const keypair = (0, crypto_wasm_1.generateBBSKeyPairG1)(params.value, seed);
        return new KeypairG1(new BBSPlusSecretKey(keypair.secret_key), new BBSPlusPublicKeyG1(keypair.public_key));
    }
}
exports.KeypairG1 = KeypairG1;
class KeypairG2 extends BBSPlusKeypair {
    static generate(params, seed) {
        const keypair = (0, crypto_wasm_1.generateBBSKeyPairG2)(params.value, seed);
        return new KeypairG2(new BBSPlusSecretKey(keypair.secret_key), new BBSPlusPublicKeyG2(keypair.public_key));
    }
}
exports.KeypairG2 = KeypairG2;
//# sourceMappingURL=keys.js.map