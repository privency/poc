import { Versioned } from './versioned';
import { PresentationSpecification } from './presentation-specification';
import { CompositeProofG1 } from '../composite-proof';
import { BBSPlusPublicKeyG2 } from '../bbs-plus';
import { VerifyResult } from '@docknetwork/crypto-wasm';
import { AttributeCiphertexts, PredicateParamType } from './types-and-consts';
import { AccumulatorPublicKey } from '../accumulator';
export declare class Presentation extends Versioned {
    readonly spec: PresentationSpecification;
    readonly proof: CompositeProofG1;
    readonly attributeCiphertexts?: Map<number, AttributeCiphertexts>;
    readonly context?: string;
    readonly nonce?: Uint8Array;
    constructor(version: string, spec: PresentationSpecification, proof: CompositeProofG1, attributeCiphertexts?: Map<number, AttributeCiphertexts>, context?: string, nonce?: Uint8Array);
    /**
     *
     * @param publicKeys - Array of keys in the order of credentials in the presentation.
     * @param accumulatorPublicKeys - Mapping credential index -> accumulator public key
     * @param predicateParams - Setup params for various predicates
     * @param circomOutputs - Values for the outputs variables of the Circom programs used for predicates
     */
    verify(publicKeys: BBSPlusPublicKeyG2[], accumulatorPublicKeys?: Map<number, AccumulatorPublicKey>, predicateParams?: Map<string, PredicateParamType>, circomOutputs?: Map<number, Uint8Array[][]>): VerifyResult;
    /**
     * Encode the revealed attributes of the presented credential
     * @param credIdx
     * @param presentedCred
     * @param presentedCredSchema
     * @param flattenedNames
     */
    private static encodeRevealed;
    toJSON(): object;
    static fromJSON(j: object): Presentation;
    static toBs58(v: object, ret: object): void;
    static fromBs58(v: object, ret: AttributeCiphertexts): void;
    private static addLegoVerifyingKeyToTracker;
}
//# sourceMappingURL=presentation.d.ts.map