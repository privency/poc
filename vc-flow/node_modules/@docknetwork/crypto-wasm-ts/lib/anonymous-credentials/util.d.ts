import { AccumulatorParams, AccumulatorPublicKey, MembershipProvingKey, NonMembershipProvingKey } from '../accumulator';
import { AttributeEquality, FlattenedSchema, PredicateParamType } from './types-and-consts';
import { SaverEncryptionGens, SaverEncryptionGensUncompressed } from '../saver';
import { PresentationSpecification } from './presentation-specification';
import { ValueTypes } from './schema';
import { WitnessEqualityMetaStatement } from '../composite-proof';
import { SetupParamsTracker } from './setup-params-tracker';
export declare function dockAccumulatorParams(): AccumulatorParams;
export declare function dockAccumulatorMemProvingKey(): MembershipProvingKey;
export declare function dockAccumulatorNonMemProvingKey(): NonMembershipProvingKey;
export declare function dockSaverEncryptionGens(): SaverEncryptionGens;
export declare function dockSaverEncryptionGensUncompressed(): SaverEncryptionGensUncompressed;
export declare function flattenTill2ndLastKey(obj: object): [string[], object[]];
/**
 * The context passed to the proof contains the version and the presentation spec as well. This is done to bind the
 * presentation spec and the version cryptographically to the proof.
 * @param version
 * @param presSpec
 * @param context
 */
export declare function buildContextForProof(version: string, presSpec: PresentationSpecification, context?: string | Uint8Array): Uint8Array;
export declare function getTransformedMinMax(name: string, valTyp: ValueTypes, min: number, max: number): [number, number];
export declare function createWitEq(eql: AttributeEquality, flattenedSchemas: FlattenedSchema[]): WitnessEqualityMetaStatement;
export declare function deepClone(obj: unknown): unknown;
export declare function accumulatorStatement(checkType: string, pk: AccumulatorPublicKey, accumulated: Uint8Array, setupParamsTrk: SetupParamsTracker): Uint8Array;
export declare function saverStatement(forProver: boolean, chunkBitSize: number, commGensId: string, encKeyId: string, snarkKeyId: string, commGens: PredicateParamType, encKey: PredicateParamType, snarkKey: PredicateParamType, setupParamsTrk: SetupParamsTracker): Uint8Array;
//# sourceMappingURL=util.d.ts.map