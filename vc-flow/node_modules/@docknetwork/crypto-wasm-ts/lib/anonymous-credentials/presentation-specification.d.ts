import { AttributeEquality, ID_STR, REV_CHECK_STR, TYPE_STR } from './types-and-consts';
export interface IPresentedStatus {
    [ID_STR]: string;
    [TYPE_STR]: string;
    [REV_CHECK_STR]: string;
    accumulated: Uint8Array;
    extra: object;
}
export interface IPresentedAttributeBounds {
    min: number;
    max: number;
    paramId: string;
}
export interface IPresentedAttributeVE {
    chunkBitSize: number;
    commitmentGensId: string;
    encryptionKeyId: string;
    snarkKeyId: string;
}
/**
 * A mapping of one private variable of the Circom circuit to one or more attributes
 */
export interface ICircuitPrivateVars {
    varName: string;
    attributeName: {
        [key: string]: null | object;
    } | {
        [key: string]: null | object;
    }[];
}
/**
 * A mapping of one public variable of the Circom circuit to one or more values
 */
export interface ICircuitPublicVars {
    varName: string;
    value: Uint8Array | Uint8Array[];
}
/**
 * R1CS public inputs, private attribute names involved in circuit.
 */
export interface ICircomPredicate {
    privateVars: ICircuitPrivateVars[];
    publicVars: ICircuitPublicVars[];
    circuitId: string;
    snarkKeyId: string;
}
export interface IPresentedCredential {
    version: string;
    schema: string;
    revealedAttributes: object;
    status?: IPresentedStatus;
    bounds?: {
        [key: string]: string | IPresentedAttributeBounds;
    };
    verifiableEncryptions?: {
        [key: string]: string | IPresentedAttributeVE;
    };
    circomPredicates?: ICircomPredicate[];
}
/**
 * Specifies what the presentation is proving like what credentials, what's being revealed, which attributes are being proven
 * equal, bounds being enforced, etc
 */
export declare class PresentationSpecification {
    credentials: IPresentedCredential[];
    attributeEqualities: AttributeEquality[];
    constructor();
    reset(): void;
    addPresentedCredential(version: string, schema: string, revealedAttributes: object, status?: IPresentedStatus, bounds?: {
        [key: string]: string | IPresentedAttributeBounds;
    }, verifiableEncryptions?: {
        [key: string]: string | IPresentedAttributeVE;
    }, circomPredicates?: ICircomPredicate[]): void;
    getStatus(credIndex: number): IPresentedStatus | undefined;
    toJSON(): string;
}
//# sourceMappingURL=presentation-specification.d.ts.map