"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetupParamsTracker = void 0;
const composite_proof_1 = require("../composite-proof");
const util_1 = require("./util");
/**
 * Track `SetupParam` create during proving and verification. This class is meant for internal use only.
 */
class SetupParamsTracker {
    constructor() {
        this.setupParams = [];
        this.paramIdToSetupParamIdx = new Map();
    }
    add(sp) {
        this.setupParams.push(sp);
        return this.setupParams.length - 1;
    }
    addForParamId(paramId, sp) {
        if (this.isTrackingParam(paramId)) {
            throw new Error(`Already tracking param id ${paramId}`);
        }
        this.setupParams.push(sp);
        const i = this.lastIndex();
        this.paramIdToSetupParamIdx.set(paramId, i);
        return i;
    }
    lastIndex() {
        return this.nthLastIndex(1);
    }
    indexForParam(paramId) {
        if (!this.isTrackingParam(paramId)) {
            throw new Error(`Not tracking param id ${paramId}`);
        }
        return this.paramIdToSetupParamIdx.get(paramId);
    }
    nthLastIndex(n) {
        if (this.setupParams.length < n) {
            throw new Error(`Invalid index ${n} for setup params array of size ${this.setupParams.length}`);
        }
        return this.setupParams.length - n;
    }
    hasAccumulatorParams() {
        return this._accumParamsIdx !== undefined;
    }
    hasAccumulatorMemProvingKey() {
        return this._memPrkIdx !== undefined;
    }
    hasAccumulatorNonMemProvingKey() {
        return this._nonMemPrkIdx !== undefined;
    }
    hasEncryptionGensCompressed() {
        return this._encGensCompIdx !== undefined;
    }
    hasEncryptionGensUncompressed() {
        return this._encGensIdx !== undefined;
    }
    isTrackingParam(paramId) {
        return this.paramIdToSetupParamIdx.get(paramId) !== undefined;
    }
    addAccumulatorParams() {
        if (this.hasAccumulatorParams()) {
            throw new Error('Already present');
        }
        this.setupParams.push(composite_proof_1.SetupParam.vbAccumulatorParams((0, util_1.dockAccumulatorParams)()));
        this._accumParamsIdx = this.lastIndex();
        return this._accumParamsIdx;
    }
    addAccumulatorMemProvingKey() {
        if (this.hasAccumulatorMemProvingKey()) {
            throw new Error('Already present');
        }
        this.setupParams.push(composite_proof_1.SetupParam.vbAccumulatorMemProvingKey((0, util_1.dockAccumulatorMemProvingKey)()));
        this._memPrkIdx = this.lastIndex();
        return this._memPrkIdx;
    }
    addAccumulatorNonMemProvingKey() {
        if (this.hasAccumulatorNonMemProvingKey()) {
            throw new Error('Already present');
        }
        this.setupParams.push(composite_proof_1.SetupParam.vbAccumulatorNonMemProvingKey((0, util_1.dockAccumulatorNonMemProvingKey)()));
        this._nonMemPrkIdx = this.lastIndex();
        return this._nonMemPrkIdx;
    }
    addEncryptionGensCompressed() {
        if (this.hasEncryptionGensCompressed()) {
            throw new Error('Already present');
        }
        this.setupParams.push(composite_proof_1.SetupParam.saverEncryptionGens((0, util_1.dockSaverEncryptionGens)()));
        this._encGensCompIdx = this.lastIndex();
        return this._encGensCompIdx;
    }
    addEncryptionGensUncompressed() {
        if (this.hasEncryptionGensUncompressed()) {
            throw new Error('Already present');
        }
        this.setupParams.push(composite_proof_1.SetupParam.saverEncryptionGensUncompressed((0, util_1.dockSaverEncryptionGensUncompressed)()));
        this._encGensIdx = this.lastIndex();
        return this._encGensIdx;
    }
    get accumParamsIdx() {
        if (this._accumParamsIdx === undefined) {
            throw new Error('Not set yet');
        }
        return this._accumParamsIdx;
    }
    get memPrkIdx() {
        if (this._memPrkIdx === undefined) {
            throw new Error('Not set yet');
        }
        return this._memPrkIdx;
    }
    get nonMemPrkIdx() {
        if (this._nonMemPrkIdx === undefined) {
            throw new Error('Not set yet');
        }
        return this._nonMemPrkIdx;
    }
    get encGensIdx() {
        if (this._encGensIdx === undefined) {
            throw new Error('Not set yet');
        }
        return this._encGensIdx;
    }
    get encGensCompIdx() {
        if (this._encGensCompIdx === undefined) {
            throw new Error('Not set yet');
        }
        return this._encGensCompIdx;
    }
}
exports.SetupParamsTracker = SetupParamsTracker;
//# sourceMappingURL=setup-params-tracker.js.map