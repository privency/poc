import { Versioned } from './versioned';
import { Credential } from './credential';
import { BBSPlusPublicKeyG2 } from '../bbs-plus';
import { CompositeProofG1, QuasiProofSpecG1 } from '../composite-proof';
import { LegoProvingKey, LegoProvingKeyUncompressed } from '../legosnark';
import { ParsedR1CSFile } from '../r1cs';
import { R1CS } from '@docknetwork/crypto-wasm';
import { AttributeEquality, PredicateParamType } from './types-and-consts';
import { IPresentedAttributeBounds, IPresentedAttributeVE, PresentationSpecification } from './presentation-specification';
import { Presentation } from './presentation';
import { AccumulatorPublicKey, AccumulatorWitness } from '../accumulator';
import { SaverChunkedCommitmentGens, SaverChunkedCommitmentGensUncompressed, SaverEncryptionKey, SaverEncryptionKeyUncompressed, SaverProvingKey, SaverProvingKeyUncompressed } from '../saver';
export declare class PresentationBuilder extends Versioned {
    static VERSION: string;
    _context?: string;
    _nonce?: Uint8Array;
    proof?: CompositeProofG1;
    _proofSpec?: QuasiProofSpecG1;
    spec: PresentationSpecification;
    credentials: [Credential, BBSPlusPublicKeyG2][];
    revealedAttributes: Map<number, Set<string>>;
    attributeEqualities: AttributeEquality[];
    credStatuses: Map<number, [AccumulatorWitness, Uint8Array, AccumulatorPublicKey, object]>;
    bounds: Map<number, Map<string, IPresentedAttributeBounds>>;
    verifEnc: Map<number, Map<string, IPresentedAttributeVE>>;
    circomPredicates: Map<number, [
        [string, string | string[]][],
        [string, Uint8Array | Uint8Array[]][],
        string,
        string
    ][]>;
    predicateParams: Map<string, PredicateParamType>;
    constructor();
    addCredential(credential: Credential, pk: BBSPlusPublicKeyG2): number;
    /**
     *
     * @param credIdx
     * @param attributeNames - Nested attribute names use the "dot" separator
     */
    markAttributesRevealed(credIdx: number, attributeNames: Set<string>): void;
    /**
     *
     * @param equality - Array of reference to attribute where each reference is a pair with 1st item being credential index
     * and 2nd being attribute index in the flattened attribute list.
     */
    markAttributesEqual(...equality: AttributeEquality): void;
    /**
     * Add accumulator value, witness and public key for proving credential status.
     * @param credIdx
     * @param accumWitness
     * @param accumulated
     * @param accumPublicKey
     * @param extra
     */
    addAccumInfoForCredStatus(credIdx: number, accumWitness: AccumulatorWitness, accumulated: Uint8Array, accumPublicKey: AccumulatorPublicKey, extra?: object): void;
    /**
     *
     * @param credIdx
     * @param attributeName - Nested attribute names use the "dot" separator
     * @param min
     * @param max
     * @param provingKeyId
     * @param provingKey
     */
    enforceBounds(credIdx: number, attributeName: string, min: number, max: number, provingKeyId: string, provingKey?: LegoProvingKey | LegoProvingKeyUncompressed): void;
    /**
     *
     * @param credIdx
     * @param attributeName - Nested attribute names use the "dot" separator
     * @param chunkBitSize
     * @param commGensId
     * @param encryptionKeyId
     * @param snarkPkId
     * @param commGens
     * @param encryptionKey
     * @param snarkPk
     */
    verifiablyEncrypt(credIdx: number, attributeName: string, chunkBitSize: number, commGensId: string, encryptionKeyId: string, snarkPkId: string, commGens?: SaverChunkedCommitmentGens | SaverChunkedCommitmentGensUncompressed, encryptionKey?: SaverEncryptionKey | SaverEncryptionKeyUncompressed, snarkPk?: SaverProvingKey | SaverProvingKeyUncompressed): void;
    enforceCircomPredicate(credIdx: number, circuitPrivateVars: [string, string | string[]][], circuitPublicVars: [string, Uint8Array | Uint8Array[]][], circuitId: string, provingKeyId: string, r1cs?: R1CS | ParsedR1CSFile, wasmBytes?: Uint8Array, provingKey?: LegoProvingKey | LegoProvingKeyUncompressed): void;
    /**
     * Create a presentation
     */
    finalize(): Presentation;
    get context(): string | undefined;
    set context(context: string | undefined);
    get nonce(): Uint8Array | undefined;
    set nonce(nonce: Uint8Array | undefined);
    validateCredIndex(credIdx: number): void;
    private updatePredicateParams;
    static r1csParamId(circuitId: string): string;
    static wasmParamId(circuitId: string): string;
    private addLegoProvingKeyToTracker;
}
//# sourceMappingURL=presentation-builder.d.ts.map