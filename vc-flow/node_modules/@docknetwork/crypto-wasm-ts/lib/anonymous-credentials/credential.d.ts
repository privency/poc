import { Versioned } from './versioned';
import { CredentialSchema } from './schema';
import { BBSPlusPublicKeyG2, SignatureG1, SignatureParamsG1 } from '../bbs-plus';
import { VerifyResult } from '@docknetwork/crypto-wasm';
export declare class Credential extends Versioned {
    readonly schema: CredentialSchema;
    readonly subject: object | object[];
    readonly credentialStatus?: object;
    readonly topLevelFields: Map<string, unknown>;
    readonly signature: SignatureG1;
    constructor(version: string, schema: CredentialSchema, subject: object, topLevelFields: Map<string, unknown>, sig: SignatureG1, credStatus?: object);
    verify(publicKey: BBSPlusPublicKeyG2, signatureParams?: SignatureParamsG1): VerifyResult;
    getTopLevelField(name: string): unknown;
    /**
     * A credential will have at least some proof metadata like the type or purpose. This adds those defaults to the
     * given object.
     * @param s
     */
    static applyDefaultProofMetadataIfNeeded(s: object): void;
    serializeForSigning(): object;
    toJSON(): object;
    toJSONWithJsonLdContext(): object;
    static fromJSON(j: object, proofValue?: string): Credential;
}
//# sourceMappingURL=credential.d.ts.map