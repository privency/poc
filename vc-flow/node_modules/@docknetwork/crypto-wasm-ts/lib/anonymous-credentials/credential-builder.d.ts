import { BBSPlusSecretKey, SignatureG1, SignatureParamsG1 } from '../bbs-plus';
import { Versioned } from './versioned';
import { CredentialSchema } from './schema';
import { Credential } from './credential';
export interface ISigningOpts {
    requireSameFieldsAsSchema: boolean;
}
export declare const DefaultSigningOpts: ISigningOpts;
/**
 * Create a credential
 */
export declare class CredentialBuilder extends Versioned {
    static VERSION: string;
    _schema?: CredentialSchema;
    _subject?: object | object[];
    _credStatus?: object;
    _encodedAttributes?: {
        [key: string]: Uint8Array;
    };
    _topLevelFields: Map<string, unknown>;
    _sig?: SignatureG1;
    constructor();
    /**
     * Currently supports only 1 subject. Nothing tricky in supporting more but more parsing and serialization work
     * @param subject
     */
    set subject(subject: object | object[]);
    get subject(): object | object[] | undefined;
    set schema(schema: CredentialSchema);
    get schema(): CredentialSchema | undefined;
    set credStatus(subject: object | undefined);
    get credStatus(): object | undefined;
    setCredentialStatus(registryId: string, revCheck: string, memberValue: unknown): void;
    get signature(): SignatureG1 | undefined;
    setTopLevelField(name: string, value: unknown): void;
    getTopLevelField(name: string): unknown;
    /**
     * Serializes and signs creating a credential.
     * Expects the credential to have the same fields as schema. This is intentional to always communicate to the
     * verifier the full structure of the credential.
     *
     * @param secretKey
     * @param signatureParams - This makes bulk issuance of credentials with same number of attributes faster because the
     * signature params don't have to be generated.
     * @param signingOpts
     */
    sign(secretKey: BBSPlusSecretKey, signatureParams?: SignatureParamsG1, signingOpts?: Partial<ISigningOpts>): Credential;
    serializeForSigning(): object;
    /**
     * When schema doesn't match the credential, create a new appropriate schema and update the credential. Returns the
     * serialized credential
     * @param signingOpts
     */
    updateSchemaIfNeeded(signingOpts?: Partial<ISigningOpts>): object;
    static hasSameFieldsAsSchema(cred: object, schema: CredentialSchema): boolean;
}
//# sourceMappingURL=credential-builder.d.ts.map