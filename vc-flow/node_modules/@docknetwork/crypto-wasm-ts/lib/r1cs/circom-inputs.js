"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CircomInputs = void 0;
/**
 * Prepare inputs given to the Circom program for feeding into composite proof system.
 * NOTE: The functions `setPrivateInput`, `setPrivateArrayInput`, `setPublicInput` and `setPublicArrayInput` MUST be called
 * in the same order as the inputs (circuit variables) are defined in the program
 */
class CircomInputs {
    constructor() {
        this.wires = new Map();
        this.privates = [];
        this.publics = [];
    }
    /**
     * Set a private input with a non-array value
     * @param name
     * @param value
     */
    setPrivateInput(name, value) {
        this.setWire(name, [value]);
        this.privates.push(name);
    }
    /**
     * Set a private input with am array value
     * @param name
     * @param values
     */
    setPrivateArrayInput(name, values) {
        this.setWire(name, values);
        this.privates.push(name);
    }
    /**
     * Set a public input with a non-array value
     * @param name
     * @param value
     */
    setPublicInput(name, value) {
        this.setWire(name, [value]);
        this.publics.push(name);
    }
    /**
     * Set a public input with am array value
     * @param name
     * @param values
     */
    setPublicArrayInput(name, values) {
        this.setWire(name, values);
        this.publics.push(name);
    }
    ensureInputUnset(name) {
        if (this.wires.has(name)) {
            throw new Error(`Input ${name} already set`);
        }
    }
    setWire(name, values) {
        this.ensureInputUnset(name);
        this.wires.set(name, values);
    }
}
exports.CircomInputs = CircomInputs;
//# sourceMappingURL=circom-inputs.js.map