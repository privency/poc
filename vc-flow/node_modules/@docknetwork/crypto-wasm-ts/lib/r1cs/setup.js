"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.R1CSSnarkSetup = void 0;
const legosnark_1 = require("../legosnark");
const crypto_wasm_1 = require("@docknetwork/crypto-wasm");
const index_1 = require("./index");
/**
 * Create SNARK proving and verifying key from the parsed R1CS file.
 */
class R1CSSnarkSetup {
    /**
     * Create proving key from a parsed R1CS file. Returns the compressed proving key.
     * @param parsedR1cs
     * @param commitWitnessCount - If not provided, uses the number of private inputs (only explicitly defined, not intermediate)
     * to the circuit
     */
    static fromParsedR1CSFile(parsedR1cs, commitWitnessCount) {
        if (commitWitnessCount === undefined) {
            commitWitnessCount = parsedR1cs.nPrvInputs;
        }
        const processedR1cs = (0, index_1.processParsedR1CSFile)(parsedR1cs);
        return R1CSSnarkSetup.fromR1CS(processedR1cs, commitWitnessCount);
    }
    static fromR1CS(processedR1cs, commitWitnessCount) {
        const pk = (0, crypto_wasm_1.r1csSnarkSetup)(processedR1cs.curveName, processedR1cs.numPublic, processedR1cs.numPrivate, processedR1cs.constraints, commitWitnessCount, false // return compressed key
        );
        return new legosnark_1.LegoProvingKey(pk);
    }
}
exports.R1CSSnarkSetup = R1CSSnarkSetup;
//# sourceMappingURL=setup.js.map