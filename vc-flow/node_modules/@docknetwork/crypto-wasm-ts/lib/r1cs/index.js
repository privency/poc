"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getR1CS = exports.processParsedR1CSFile = void 0;
/**
 * Take/create the required data from the parsed R1CS file.
 * @param parsed
 */
function processParsedR1CSFile(parsed) {
    const curveName = parsed.curve.name;
    const numPublic = 1 + parsed.nPubInputs + parsed.nOutputs;
    const numPrivate = parsed.nVars - numPublic;
    function parseLC(i, v) {
        // @ts-ignore
        return [parseInt(i), parsed.F.fromMontgomery(v)];
    }
    const constraints = parsed.constraints.map((c) => {
        // @ts-ignore
        const A = Object.entries(c[0]).map(([i, v]) => parseLC(i, v));
        // @ts-ignore
        const B = Object.entries(c[1]).map(([i, v]) => parseLC(i, v));
        // @ts-ignore
        const C = Object.entries(c[2]).map(([i, v]) => parseLC(i, v));
        return [A, B, C];
    });
    return { curveName, numPublic, numPrivate, constraints };
}
exports.processParsedR1CSFile = processParsedR1CSFile;
function getR1CS(r1cs) {
    // @ts-ignore
    if (r1cs.F !== undefined) {
        return processParsedR1CSFile(r1cs);
    }
    return r1cs;
}
exports.getR1CS = getR1CS;
__exportStar(require("./setup"), exports);
__exportStar(require("./circom-inputs"), exports);
__exportStar(require("./circom-circuit"), exports);
//# sourceMappingURL=index.js.map