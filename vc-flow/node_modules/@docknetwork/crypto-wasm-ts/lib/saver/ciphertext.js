"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SaverCiphertext = void 0;
const bytearray_wrapper_1 = require("../bytearray-wrapper");
const crypto_wasm_1 = require("@docknetwork/crypto-wasm");
const util_1 = require("./util");
/**
 * The ciphertext that is sent along the proof
 */
class SaverCiphertext extends bytearray_wrapper_1.BytearrayWrapper {
    /**
     * Verify that the ciphertext does encrypt the message in `decrypted` using uncompressed public params
     * @param decrypted
     * @param decryptionKey
     * @param snarkVk
     * @param encGens
     * @param chunkBitSize - Must be same as the one used by the decryptor to create the parameters.
     */
    verifyDecryption(decrypted, decryptionKey, snarkVk, encGens, chunkBitSize) {
        return (0, crypto_wasm_1.saverVerifyDecryptionUsingSnarkVk)(this.value, decrypted.message, decrypted.nu, decryptionKey.value, snarkVk.value, encGens.value, (0, util_1.getChunkBitSize)(chunkBitSize), true);
    }
    /**
     * Same as `this.verifyDecryption` except that is takes compressed parameters
     * @param decrypted
     * @param decryptionKey
     * @param snarkVk
     * @param encGens
     * @param chunkBitSize - Must be same as the one used by the decryptor to create the parameters.
     */
    verifyDecryptionUsingCompressedParams(decrypted, decryptionKey, snarkVk, encGens, chunkBitSize) {
        return (0, crypto_wasm_1.saverVerifyDecryptionUsingSnarkVk)(this.value, decrypted.message, decrypted.nu, decryptionKey.value, snarkVk.value, encGens.value, (0, util_1.getChunkBitSize)(chunkBitSize), false);
    }
}
exports.SaverCiphertext = SaverCiphertext;
//# sourceMappingURL=ciphertext.js.map