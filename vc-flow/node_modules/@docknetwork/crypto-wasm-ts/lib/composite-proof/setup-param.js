"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetupParam = void 0;
const crypto_wasm_1 = require("@docknetwork/crypto-wasm");
const bytearray_wrapper_1 = require("../bytearray-wrapper");
const r1cs_1 = require("../r1cs");
/**
 * Represents (public) setup parameters of different protocols. Different setup parameters can be wrapped in this and
 * then a reference to this is passed to the `Statement`. This is helpful when the same setup parameter needs
 * to be passed to several `Statement`s as it avoids the need of having several copies of the setup parameter.
 */
class SetupParam extends bytearray_wrapper_1.BytearrayWrapper {
    static bbsSignatureParamsG1(params) {
        return new SetupParam((0, crypto_wasm_1.generateSetupParamForBBSSignatureParametersG1)(params.value));
    }
    static bbsSignaturePublicKeyG2(publicKey) {
        return new SetupParam((0, crypto_wasm_1.generateSetupParamForBBSPublicKeyG2)(publicKey.value));
    }
    static vbAccumulatorParams(params) {
        return new SetupParam((0, crypto_wasm_1.generateSetupParamForVbAccumulatorParams)(params.value));
    }
    static vbAccumulatorPublicKey(publicKey) {
        return new SetupParam((0, crypto_wasm_1.generateSetupParamForVbAccumulatorPublicKey)(publicKey.value));
    }
    static vbAccumulatorMemProvingKey(provingKey) {
        return new SetupParam((0, crypto_wasm_1.generateSetupParamForVbAccumulatorMemProvingKey)(provingKey.value));
    }
    static vbAccumulatorNonMemProvingKey(provingKey) {
        return new SetupParam((0, crypto_wasm_1.generateSetupParamForVbAccumulatorNonMemProvingKey)(provingKey.value));
    }
    static pedersenCommitmentKeyG1(commitmentKey) {
        return new SetupParam((0, crypto_wasm_1.generateSetupParamForPedersenCommitmentKeyG1)(commitmentKey));
    }
    static saverEncryptionGens(encGens) {
        return new SetupParam((0, crypto_wasm_1.generateSetupParamForSaverEncryptionGens)(encGens.value, false));
    }
    static saverEncryptionGensUncompressed(encGens) {
        return new SetupParam((0, crypto_wasm_1.generateSetupParamForSaverEncryptionGens)(encGens.value, true));
    }
    static saverCommitmentGens(commGens) {
        return new SetupParam((0, crypto_wasm_1.generateSetupParamForSaverCommitmentGens)(commGens.value, false));
    }
    static saverCommitmentGensUncompressed(commGens) {
        return new SetupParam((0, crypto_wasm_1.generateSetupParamForSaverCommitmentGens)(commGens.value, true));
    }
    static saverEncryptionKey(key) {
        return new SetupParam((0, crypto_wasm_1.generateSetupParamForSaverEncryptionKey)(key.value, false));
    }
    static saverEncryptionKeyUncompressed(key) {
        return new SetupParam((0, crypto_wasm_1.generateSetupParamForSaverEncryptionKey)(key.value, true));
    }
    static saverProvingKey(key) {
        return new SetupParam((0, crypto_wasm_1.generateSetupParamForSaverProvingKey)(key.value, false));
    }
    static saverProvingKeyUncompressed(key) {
        return new SetupParam((0, crypto_wasm_1.generateSetupParamForSaverProvingKey)(key.value, true));
    }
    static saverVerifyingKey(key) {
        return new SetupParam((0, crypto_wasm_1.generateSetupParamForSaverVerifyingKey)(key.value, false));
    }
    static saverVerifyingKeyUncompressed(key) {
        return new SetupParam((0, crypto_wasm_1.generateSetupParamForSaverVerifyingKey)(key.value, true));
    }
    static legosnarkProvingKey(key) {
        return new SetupParam((0, crypto_wasm_1.generateSetupParamForLegoProvingKey)(key.value, false));
    }
    static legosnarkProvingKeyUncompressed(key) {
        return new SetupParam((0, crypto_wasm_1.generateSetupParamForLegoProvingKey)(key.value, true));
    }
    static legosnarkVerifyingKey(key) {
        return new SetupParam((0, crypto_wasm_1.generateSetupParamForLegoVerifyingKey)(key.value, false));
    }
    static legosnarkVerifyingKeyUncompressed(key) {
        return new SetupParam((0, crypto_wasm_1.generateSetupParamForLegoVerifyingKey)(key.value, true));
    }
    static r1cs(r1cs) {
        let processedR1cs = (0, r1cs_1.getR1CS)(r1cs);
        return new SetupParam((0, crypto_wasm_1.generateSetupParamForR1CS)(processedR1cs.curveName, processedR1cs.numPublic, processedR1cs.numPrivate, processedR1cs.constraints));
    }
    static bytes(b) {
        return new SetupParam((0, crypto_wasm_1.generateSetupParamForBytes)(b));
    }
    static fieldElementVec(arr) {
        return new SetupParam((0, crypto_wasm_1.generateSetupParamForFieldElemVec)(arr));
    }
}
exports.SetupParam = SetupParam;
//# sourceMappingURL=setup-param.js.map