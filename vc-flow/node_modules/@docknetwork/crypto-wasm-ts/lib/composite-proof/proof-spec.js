"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuasiProofSpecG1 = exports.ProofSpecG1 = void 0;
const statement_1 = require("./statement");
const crypto_wasm_1 = require("@docknetwork/crypto-wasm");
/**
 * The specification used to construct the proof. This contains all the statements and the meta statements.
 * If you have a lot of `Statements` or `SetupParam`s or they have a large size like for SNARKs, use `QuasiProofSpecG1`
 */
class ProofSpecG1 {
    constructor(statements, metaStatements, setupParams, context) {
        const params = (setupParams !== null && setupParams !== void 0 ? setupParams : new Array()).map((s) => s.value);
        this.value = (0, crypto_wasm_1.generateProofSpecG1)(statements.values, metaStatements.values, params, context);
    }
    /**
     * Check if the proof spec is valid.
     * @returns
     */
    isValid() {
        return (0, crypto_wasm_1.isProofSpecG1Valid)(this.value);
    }
}
exports.ProofSpecG1 = ProofSpecG1;
/**
 * The specification used to construct the proof. This contains all the statements and the meta statements.
 * The difference between this and `ProofSpecG1` that this does not call WASM to generate a `ProofSpecG1` object that
 * corresponds to the `ProofSpec` struct in Rust. This WASM call be expensive due to the serialization overhead and thus
 * it's advised to use this when there are a lot of `Statements` or `SetupParam`s.
 */
class QuasiProofSpecG1 {
    constructor(statements, metaStatements, setupParams, context) {
        this.statements = statements || new statement_1.Statements();
        this.metaStatements = metaStatements || new statement_1.MetaStatements();
        this.setupParams = setupParams || new Array();
        this.context = context;
    }
    addStatement(statement) {
        return this.statements.add(statement);
    }
    addMetaStatement(metaStatement) {
        return this.metaStatements.add(metaStatement);
    }
    addSetupParam(setupParam) {
        this.setupParams.push(setupParam);
        return this.setupParams.length - 1;
    }
    setContext(context) {
        this.context = context;
    }
    toProofSpec() {
        return new ProofSpecG1(this.statements, this.metaStatements, this.setupParams, this.context);
    }
}
exports.QuasiProofSpecG1 = QuasiProofSpecG1;
//# sourceMappingURL=proof-spec.js.map