import { IAccumulatorState, IUniversalAccumulatorState } from './IAccumulatorState';
import { IInitialElementsStore } from './IInitialElementsStore';
/**
 * In memory implementation of the state. For testing only
 */
export declare class InMemoryState implements IAccumulatorState {
    state: Set<string>;
    constructor();
    add(element: Uint8Array): Promise<void>;
    remove(element: Uint8Array): Promise<void>;
    has(element: Uint8Array): Promise<boolean>;
    static key(element: Uint8Array): string;
}
export declare class InMemoryUniversalState extends InMemoryState implements IUniversalAccumulatorState {
    elements(): Promise<Iterable<Uint8Array>>;
}
export declare class InMemoryInitialElementsStore implements IInitialElementsStore {
    store: Set<string>;
    constructor();
    add(element: Uint8Array): Promise<void>;
    has(element: Uint8Array): Promise<boolean>;
    static key(element: Uint8Array): string;
}
//# sourceMappingURL=in-memory-persistence.d.ts.map