import { AccumulatorSecretKey } from './params-and-keys';
import { BytearrayWrapper } from '../bytearray-wrapper';
export declare abstract class AccumulatorWitness {
    value: Uint8Array | object;
    constructor(value: Uint8Array | object);
    abstract updatePostAdd(addition: Uint8Array, element: Uint8Array, accumulatorValueBeforeAddition: Uint8Array): void;
    abstract updatePostRemove(removal: Uint8Array, element: Uint8Array, accumulatorValueAfterRemoval: Uint8Array): void;
    abstract updateUsingPublicInfoPostBatchUpdate(element: Uint8Array, additions: Uint8Array[], removals: Uint8Array[], publicInfo: WitnessUpdatePublicInfo): void;
    abstract updateUsingPublicInfoPostMultipleBatchUpdates(element: Uint8Array, additions: Uint8Array[][], removals: Uint8Array[][], publicInfo: WitnessUpdatePublicInfo[]): void;
}
export declare class MembershipWitness extends AccumulatorWitness {
    value: Uint8Array;
    /**
     * Update a membership witness after an element is added to the accumulator
     * @param addition - new addition to the accumulator
     * @param member - whose witness is being updated
     * @param accumulatorValueBeforeAddition - accumulator value before the addition was done.
     */
    updatePostAdd(addition: Uint8Array, member: Uint8Array, accumulatorValueBeforeAddition: Uint8Array): void;
    /**
     * Update a membership witness after an element is removed from the accumulator.
     * @param removal - removal from the accumulator
     * @param member - whose witness is being updated
     * @param accumulatorValueAfterRemoval - accumulator value after the removal was done.
     */
    updatePostRemove(removal: Uint8Array, member: Uint8Array, accumulatorValueAfterRemoval: Uint8Array): void;
    /**
     * Compute an update to the membership witness after adding and removing batches of elements from the accumulator.
     * @param member - the member whose witness is to be updated
     * @param additions - array of additions
     * @param removals - array of removals
     * @param publicInfo - witness update info published by the accumulator manager
     */
    updateUsingPublicInfoPostBatchUpdate(member: Uint8Array, additions: Uint8Array[], removals: Uint8Array[], publicInfo: WitnessUpdatePublicInfo): void;
    /**
     * Compute an update to the membership witness after adding and removing several batches of elements from the accumulator.
     * For each batch of updates, additions, removals and witness update info are provided.
     * @param member - the member whose witness is to be updated
     * @param additions - array of arrays of additions
     * @param removals - array of arrays of removals
     * @param publicInfo - array of witness update info
     */
    updateUsingPublicInfoPostMultipleBatchUpdates(member: Uint8Array, additions: Uint8Array[][], removals: Uint8Array[][], publicInfo: WitnessUpdatePublicInfo[]): void;
    /**
     * Compute an update to several membership witnesses after adding and removing batches of elements from the accumulator.
     * @param witnesses - membership witnesses to update
     * @param members - members corresponding to the witnesses
     * @param additions
     * @param removals
     * @param accumulatorValueBeforeUpdates - accumulator value before the updates
     * @param secretKey
     */
    static updateMultiplePostBatchUpdates(witnesses: MembershipWitness[], members: Uint8Array[], additions: Uint8Array[], removals: Uint8Array[], accumulatorValueBeforeUpdates: Uint8Array, secretKey: AccumulatorSecretKey): MembershipWitness[];
    toJSON(): string;
    static fromJSON(json: string): MembershipWitness;
}
export declare class NonMembershipWitness extends AccumulatorWitness {
    value: {
        d: Uint8Array;
        C: Uint8Array;
    };
    /**
     * Update a non-membership witness after an element is added to the accumulator
     * @param addition - new addition to the accumulator
     * @param nonMember - whose witness is being updated
     * @param accumulatorValueBeforeAddition - accumulator value before the addition was done.
     */
    updatePostAdd(addition: Uint8Array, nonMember: Uint8Array, accumulatorValueBeforeAddition: Uint8Array): void;
    /**
     * Update a non-membership witness after an element is removed from the accumulator.
     * @param removal - removal from the accumulator
     * @param nonMember - whose witness is being updated
     * @param accumulatorValueAfterRemoval - accumulator value after the removal was done.
     */
    updatePostRemove(removal: Uint8Array, nonMember: Uint8Array, accumulatorValueAfterRemoval: Uint8Array): void;
    /**
     * Compute an update to the non-membership witness after adding and removing batches of elements from the accumulator.
     * @param nonMember - the non-member whose witness is to be updated
     * @param additions - array of additions
     * @param removals - array of removals
     * @param publicInfo - witness update info published by the accumulator manager
     */
    updateUsingPublicInfoPostBatchUpdate(nonMember: Uint8Array, additions: Uint8Array[], removals: Uint8Array[], publicInfo: WitnessUpdatePublicInfo): void;
    /**
     * Compute an update to the non-membership witness after adding and removing several batches of elements from the accumulator.
     * For each batch of updates, additions, removals and witness update info are provided.
     * @param nonMember - the non-member whose witness is to be updated
     * @param additions - array of arrays of additions
     * @param removals - array of arrays of removals
     * @param publicInfo - array of witness update info
     */
    updateUsingPublicInfoPostMultipleBatchUpdates(nonMember: Uint8Array, additions: Uint8Array[][], removals: Uint8Array[][], publicInfo: WitnessUpdatePublicInfo[]): void;
    /**
     * Compute an update to several non-membership witnesses after adding and removing batches of elements from the accumulator.
     * @param witnesses - non-membership witnesses to update
     * @param nonMembers - nonMembers corresponding to the witnesses
     * @param additions
     * @param removals
     * @param accumulatorValueBeforeUpdates - accumulator value before the updates
     * @param secretKey
     */
    static updateMultiplePostBatchUpdates(witnesses: NonMembershipWitness[], nonMembers: Uint8Array[], additions: Uint8Array[], removals: Uint8Array[], accumulatorValueBeforeUpdates: Uint8Array, secretKey: AccumulatorSecretKey): NonMembershipWitness[];
    toJSON(): string;
    static fromJSON(json: string): NonMembershipWitness;
}
/**
 * Public info published by the accumulator manager used to update witnesses after several additions and removals.
 */
export declare class WitnessUpdatePublicInfo extends BytearrayWrapper {
    toJSON(): string;
    fromJSON(json: string): WitnessUpdatePublicInfo;
    /**
     * Accumulator manager creates the witness update info corresponding to the additions and removals.
     * @param accumulatorValueBeforeUpdates - accumulator value before the additions and removals
     * @param additions
     * @param removals
     * @param sk
     */
    static new(accumulatorValueBeforeUpdates: Uint8Array, additions: Uint8Array[], removals: Uint8Array[], sk: AccumulatorSecretKey): WitnessUpdatePublicInfo;
}
//# sourceMappingURL=accumulatorWitness.d.ts.map