"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InMemoryInitialElementsStore = exports.InMemoryUniversalState = exports.InMemoryState = void 0;
/**
 * In memory implementation of the state. For testing only
 */
class InMemoryState {
    constructor() {
        this.state = new Set();
    }
    add(element) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = InMemoryState.key(element);
            if (this.state.has(key)) {
                throw new Error(`${element} already present`);
            }
            this.state.add(key);
            return Promise.resolve();
        });
    }
    remove(element) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = InMemoryState.key(element);
            if (!this.state.has(key)) {
                throw new Error(`${element} not present`);
            }
            this.state.delete(key);
            return Promise.resolve();
        });
    }
    has(element) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = InMemoryState.key(element);
            return Promise.resolve(this.state.has(key));
        });
    }
    static key(element) {
        return JSON.stringify(Array.from(element));
    }
}
exports.InMemoryState = InMemoryState;
class InMemoryUniversalState extends InMemoryState {
    elements() {
        function* y(state) {
            for (const k of state) {
                yield new Uint8Array(JSON.parse(k));
            }
        }
        return Promise.resolve(y(this.state));
    }
}
exports.InMemoryUniversalState = InMemoryUniversalState;
class InMemoryInitialElementsStore {
    constructor() {
        this.store = new Set();
    }
    add(element) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = InMemoryInitialElementsStore.key(element);
            if (this.store.has(key)) {
                throw new Error(`${element} already present`);
            }
            this.store.add(key);
            return Promise.resolve();
        });
    }
    has(element) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = InMemoryInitialElementsStore.key(element);
            return Promise.resolve(this.store.has(key));
        });
    }
    static key(element) {
        return JSON.stringify(Array.from(element));
    }
}
exports.InMemoryInitialElementsStore = InMemoryInitialElementsStore;
//# sourceMappingURL=in-memory-persistence.js.map