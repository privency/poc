"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WitnessUpdatePublicInfo = exports.NonMembershipWitness = exports.MembershipWitness = exports.AccumulatorWitness = void 0;
const crypto_wasm_1 = require("@docknetwork/crypto-wasm");
const util_1 = require("../util");
const bytearray_wrapper_1 = require("../bytearray-wrapper");
class AccumulatorWitness {
    constructor(value) {
        this.value = value;
    }
}
exports.AccumulatorWitness = AccumulatorWitness;
class MembershipWitness extends AccumulatorWitness {
    /**
     * Update a membership witness after an element is added to the accumulator
     * @param addition - new addition to the accumulator
     * @param member - whose witness is being updated
     * @param accumulatorValueBeforeAddition - accumulator value before the addition was done.
     */
    updatePostAdd(addition, member, accumulatorValueBeforeAddition) {
        this.value = (0, crypto_wasm_1.updateMembershipWitnessPostAdd)(this.value, member, addition, accumulatorValueBeforeAddition);
    }
    /**
     * Update a membership witness after an element is removed from the accumulator.
     * @param removal - removal from the accumulator
     * @param member - whose witness is being updated
     * @param accumulatorValueAfterRemoval - accumulator value after the removal was done.
     */
    updatePostRemove(removal, member, accumulatorValueAfterRemoval) {
        this.value = (0, crypto_wasm_1.updateMembershipWitnessPostRemove)(this.value, member, removal, accumulatorValueAfterRemoval);
    }
    /**
     * Compute an update to the membership witness after adding and removing batches of elements from the accumulator.
     * @param member - the member whose witness is to be updated
     * @param additions - array of additions
     * @param removals - array of removals
     * @param publicInfo - witness update info published by the accumulator manager
     */
    updateUsingPublicInfoPostBatchUpdate(member, additions, removals, publicInfo) {
        this.value = (0, crypto_wasm_1.updateMembershipWitnessUsingPublicInfoAfterBatchUpdate)(this.value, member, additions, removals, publicInfo.value);
    }
    /**
     * Compute an update to the membership witness after adding and removing several batches of elements from the accumulator.
     * For each batch of updates, additions, removals and witness update info are provided.
     * @param member - the member whose witness is to be updated
     * @param additions - array of arrays of additions
     * @param removals - array of arrays of removals
     * @param publicInfo - array of witness update info
     */
    updateUsingPublicInfoPostMultipleBatchUpdates(member, additions, removals, publicInfo) {
        const info = publicInfo.map((i) => i.value);
        this.value = (0, crypto_wasm_1.updateMembershipWitnessUsingPublicInfoAfterMultipleBatchUpdates)(this.value, member, additions, removals, info);
    }
    /**
     * Compute an update to several membership witnesses after adding and removing batches of elements from the accumulator.
     * @param witnesses - membership witnesses to update
     * @param members - members corresponding to the witnesses
     * @param additions
     * @param removals
     * @param accumulatorValueBeforeUpdates - accumulator value before the updates
     * @param secretKey
     */
    static updateMultiplePostBatchUpdates(witnesses, members, additions, removals, accumulatorValueBeforeUpdates, secretKey) {
        const wits = witnesses.map((m) => m.value);
        return (0, crypto_wasm_1.updateMembershipWitnessesPostBatchUpdates)(wits, members, additions, removals, accumulatorValueBeforeUpdates, secretKey.value).map((m) => new MembershipWitness(m));
    }
    toJSON() {
        return JSON.stringify({
            value: Array.from(this.value)
        });
    }
    static fromJSON(json) {
        const obj = JSON.parse(json);
        const [value] = (0, util_1.getUint8ArraysFromObject)(obj, ['value']);
        return new MembershipWitness(value);
    }
}
exports.MembershipWitness = MembershipWitness;
class NonMembershipWitness extends AccumulatorWitness {
    /**
     * Update a non-membership witness after an element is added to the accumulator
     * @param addition - new addition to the accumulator
     * @param nonMember - whose witness is being updated
     * @param accumulatorValueBeforeAddition - accumulator value before the addition was done.
     */
    updatePostAdd(addition, nonMember, accumulatorValueBeforeAddition) {
        this.value = (0, crypto_wasm_1.updateNonMembershipWitnessPostAdd)(this.value, nonMember, addition, accumulatorValueBeforeAddition);
    }
    /**
     * Update a non-membership witness after an element is removed from the accumulator.
     * @param removal - removal from the accumulator
     * @param nonMember - whose witness is being updated
     * @param accumulatorValueAfterRemoval - accumulator value after the removal was done.
     */
    updatePostRemove(removal, nonMember, accumulatorValueAfterRemoval) {
        this.value = (0, crypto_wasm_1.updateNonMembershipWitnessPostRemove)(this.value, nonMember, removal, accumulatorValueAfterRemoval);
    }
    /**
     * Compute an update to the non-membership witness after adding and removing batches of elements from the accumulator.
     * @param nonMember - the non-member whose witness is to be updated
     * @param additions - array of additions
     * @param removals - array of removals
     * @param publicInfo - witness update info published by the accumulator manager
     */
    updateUsingPublicInfoPostBatchUpdate(nonMember, additions, removals, publicInfo) {
        this.value = (0, crypto_wasm_1.updateNonMembershipWitnessUsingPublicInfoAfterBatchUpdate)(this.value, nonMember, additions, removals, publicInfo.value);
    }
    /**
     * Compute an update to the non-membership witness after adding and removing several batches of elements from the accumulator.
     * For each batch of updates, additions, removals and witness update info are provided.
     * @param nonMember - the non-member whose witness is to be updated
     * @param additions - array of arrays of additions
     * @param removals - array of arrays of removals
     * @param publicInfo - array of witness update info
     */
    updateUsingPublicInfoPostMultipleBatchUpdates(nonMember, additions, removals, publicInfo) {
        const info = publicInfo.map((i) => i.value);
        this.value = (0, crypto_wasm_1.updateNonMembershipWitnessUsingPublicInfoAfterMultipleBatchUpdates)(this.value, nonMember, additions, removals, info);
    }
    /**
     * Compute an update to several non-membership witnesses after adding and removing batches of elements from the accumulator.
     * @param witnesses - non-membership witnesses to update
     * @param nonMembers - nonMembers corresponding to the witnesses
     * @param additions
     * @param removals
     * @param accumulatorValueBeforeUpdates - accumulator value before the updates
     * @param secretKey
     */
    static updateMultiplePostBatchUpdates(witnesses, nonMembers, additions, removals, accumulatorValueBeforeUpdates, secretKey) {
        const wits = witnesses.map((w) => w.value);
        return (0, crypto_wasm_1.updateNonMembershipWitnessesPostBatchUpdates)(wits, nonMembers, additions, removals, accumulatorValueBeforeUpdates, secretKey.value).map((m) => new NonMembershipWitness(m));
    }
    toJSON() {
        return JSON.stringify({
            value: { d: Array.from(this.value.d), C: Array.from(this.value.C) }
        });
    }
    static fromJSON(json) {
        const obj = JSON.parse(json);
        const [d, C] = (0, util_1.getUint8ArraysFromObject)(obj.value, ['d', 'C']);
        return new NonMembershipWitness({ d, C });
    }
}
exports.NonMembershipWitness = NonMembershipWitness;
/**
 * Public info published by the accumulator manager used to update witnesses after several additions and removals.
 */
class WitnessUpdatePublicInfo extends bytearray_wrapper_1.BytearrayWrapper {
    toJSON() {
        return JSON.stringify({
            value: this.value
        });
    }
    fromJSON(json) {
        return new WitnessUpdatePublicInfo((0, util_1.jsonObjToUint8Array)(json));
    }
    /**
     * Accumulator manager creates the witness update info corresponding to the additions and removals.
     * @param accumulatorValueBeforeUpdates - accumulator value before the additions and removals
     * @param additions
     * @param removals
     * @param sk
     */
    static new(accumulatorValueBeforeUpdates, additions, removals, sk) {
        const value = (0, crypto_wasm_1.publicInfoForWitnessUpdate)(accumulatorValueBeforeUpdates, additions, removals, sk.value);
        return new WitnessUpdatePublicInfo(value);
    }
}
exports.WitnessUpdatePublicInfo = WitnessUpdatePublicInfo;
//# sourceMappingURL=accumulatorWitness.js.map