// This ends up pointing to a CJS version of the ES module generated by wasm-pack
// which is done post-compile via rollup
/*const {
    isSignatureParamsG1Valid, bbsSignatureParamsG1MaxSupportedMsgs, isSignatureParamsG2Valid, bbsSignatureParamsG2MaxSupportedMsgs,
    generateSignatureParamsG1, generateSignatureParamsG2, generateBBSKeyPairG1, generateBBSKeyPairG2,
    generateBBSSigningKey, generateBBSPublicKeyG1, generateBBSPublicKeyG2, isBBSPublicKeyG1Valid, isBBSPublicKeyG2Valid,
    bbsEncodeMessageForSigning, bbsEncodeMessagesForSigning, bbsGetBasesForCommitmentG1, bbsGetBasesForCommitmentG2,
    bbsSignG1, bbsVerifyG1, bbsCommitMsgsInG1, bbsBlindSignG1, bbsUnblindSigG1,
    bbsSignG2, bbsVerifyG2, bbsCommitMsgsInG2, bbsBlindSignG2, bbsUnblindSigG2,
    bbsInitializeProofOfKnowledgeOfSignature, bbsVerifyProofOfKnowledgeOfSignature, bbsGenProofOfKnowledgeOfSignature,
    bbsAdaptSigParamsG1ForMsgCount, bbsExtendSigParamsG22ForMsgCount, bbsChallengeContributionFromProof, bbsChallengeContributionFromProtocol,
} = require("./index");*/

const {
    wasm, requireWasmInitialized
} = require('./init_wasm');

function ensurePositiveInteger(num) {
    if (!Number.isInteger(num) || num < 0) {
        throw new Error(`Need a positive integer but found ${num} `);
    }
}

module.exports.DEFAULT_BLS12381_PRIVATE_KEY_LENGTH = 32;

module.exports.DEFAULT_BLS12381_G1_PUBLIC_KEY_LENGTH = 48;

module.exports.DEFAULT_BLS12381_G2_PUBLIC_KEY_LENGTH = 96;

module.exports.BBS_SIGNATURE_LENGTH = 112;

module.exports.generateBBSSigningKey = (seed) => {
    requireWasmInitialized();
    return wasm.generateBBSSigningKey(seed);
};

module.exports.generateSignatureParamsG1 = (messageCount, label) => {
    requireWasmInitialized();
    ensurePositiveInteger(messageCount);
    return wasm.generateSignatureParamsG1(messageCount, label);
};

module.exports.isSignatureParamsG1Valid = (params) => {
    requireWasmInitialized();
    return wasm.isSignatureParamsG1Valid(params);
};

module.exports.bbsSignatureParamsG1MaxSupportedMsgs = (params) => {
    requireWasmInitialized();
    return wasm.bbsSignatureParamsG1MaxSupportedMsgs(params);
};

module.exports.generateSignatureParamsG2 = (messageCount, label) => {
    requireWasmInitialized();
    ensurePositiveInteger(messageCount);
    return wasm.generateSignatureParamsG2(messageCount, label);
};

module.exports.isSignatureParamsG2Valid = (params) => {
    requireWasmInitialized();
    return wasm.isSignatureParamsG2Valid(params);
};

module.exports.bbsSignatureParamsG2MaxSupportedMsgs = (params) => {
    requireWasmInitialized();
    return wasm.bbsSignatureParamsG2MaxSupportedMsgs(params);
};

module.exports.bbsSignatureParamsG1ToBytes = (params) => {
    requireWasmInitialized();
    return wasm.bbsSignatureParamsG1ToBytes(params);
};

module.exports.bbsSignatureParamsG1FromBytes = (bytes) => {
    requireWasmInitialized();
    return wasm.bbsSignatureParamsG1FromBytes(bytes);
};

module.exports.bbsSignatureParamsG2ToBytes = (params) => {
    requireWasmInitialized();
    return wasm.bbsSignatureParamsG2ToBytes(params);
};

module.exports.bbsSignatureParamsG2FromBytes = (bytes) => {
    requireWasmInitialized();
    return wasm.bbsSignatureParamsG2FromBytes(bytes);
};

module.exports.generateBBSPublicKeyG1 = (secretKey, params) => {
    requireWasmInitialized();
    return wasm.generateBBSPublicKeyG1(secretKey, params);
};

module.exports.isBBSPublicKeyG1Valid = (publicKey) => {
    requireWasmInitialized();
    return wasm.isBBSPublicKeyG1Valid(publicKey);
};

module.exports.generateBBSPublicKeyG2 = (secretKey, params) => {
    requireWasmInitialized();
    return wasm.generateBBSPublicKeyG2(secretKey, params);
};

module.exports.isBBSPublicKeyG2Valid = (publicKey) => {
    requireWasmInitialized();
    return wasm.isBBSPublicKeyG2Valid(publicKey);
};

module.exports.generateBBSKeyPairG1 = (params, seed) => {
    requireWasmInitialized();
    return wasm.generateBBSKeyPairG1(params, seed);
};

module.exports.generateBBSKeyPairG2 = (params, seed) => {
    requireWasmInitialized();
    return wasm.generateBBSKeyPairG2(params, seed);
};

module.exports.bbsEncodeMessageForSigning = (message) => {
    requireWasmInitialized();
    return wasm.bbsEncodeMessageForSigning(message);
};

module.exports.bbsEncodeMessagesForSigning = (messages, indicesToEncode) => {
    requireWasmInitialized();
    return wasm.bbsEncodeMessagesForSigning(messages, indicesToEncode);
};

module.exports.bbsGetBasesForCommitmentG1 = (params, indicesToCommit) => {
    requireWasmInitialized();
    return wasm.bbsGetBasesForCommitmentG1(params, indicesToCommit);
};

module.exports.bbsGetBasesForCommitmentG2 = (params, indicesToCommit) => {
    requireWasmInitialized();
    return wasm.bbsGetBasesForCommitmentG2(params, indicesToCommit);
};

module.exports.bbsSignG1 = (
    messages,
    secretKey,
    params,
    encodeMessages
) => {
    requireWasmInitialized();
    return wasm.bbsSignG1(messages, secretKey, params, encodeMessages);
};

module.exports.bbsSignG2 = (
    messages,
    secretKey,
    params,
    encodeMessages
) => {
    requireWasmInitialized();
    return wasm.bbsSignG2(messages, secretKey, params, encodeMessages);
};

module.exports.bbsVerifyG1 = (
    messages,
    signature,
    publicKey,
    params,
    encodeMessages
) => {
    requireWasmInitialized();
    return wasm.bbsVerifyG1(messages, signature, publicKey, params, encodeMessages);
};

module.exports.bbsVerifyG2 = (
    messages,
    signature,
    publicKey,
    params,
    encodeMessages
) => {
    requireWasmInitialized();
    return wasm.bbsVerifyG2(messages, signature, publicKey, params, encodeMessages);
};

module.exports.bbsCommitMsgsInG1 = (
    messages,
    blinding,
    params,
    encodeMessages
) => {
    requireWasmInitialized();
    return wasm.bbsCommitMsgsInG1(messages, blinding, params, encodeMessages);
};

module.exports.bbsCommitMsgsInG2 = (
    messages,
    blinding,
    params,
    encodeMessages
) => {
    requireWasmInitialized();
    return wasm.bbsCommitMsgsInG2(messages, blinding, params, encodeMessages);
};

module.exports.bbsBlindSignG1 = (
    commitment,
    uncommittedMessages,
    secretKey,
    params,
    encodeMessages
) => {
    requireWasmInitialized();
    return wasm.bbsBlindSignG1(commitment, uncommittedMessages, secretKey, params, encodeMessages);
};

module.exports.bbsBlindSignG2 = (
    commitment,
    uncommittedMessages,
    secretKey,
    params,
    encodeMessages
) => {
    requireWasmInitialized();
    return wasm.bbsBlindSignG2(commitment, uncommittedMessages, secretKey, params, encodeMessages);
};

module.exports.bbsUnblindSigG1 = (
    signature,
    blinding,
) => {
    requireWasmInitialized();
    return wasm.bbsUnblindSigG1(signature, blinding);
};

module.exports.bbsUnblindSigG2 = (
    signature,
    blinding,
) => {
    requireWasmInitialized();
    return wasm.bbsUnblindSigG2(signature, blinding);
};

module.exports.bbsInitializeProofOfKnowledgeOfSignature = (
    signature,
    params,
    messages,
    blindings,
    revealedIndices,
    encodeMessages
) => {
    requireWasmInitialized();
    return wasm.bbsInitializeProofOfKnowledgeOfSignature(signature, params, messages, blindings, revealedIndices, encodeMessages);
};

module.exports.bbsGenProofOfKnowledgeOfSignature = (
    protocol,
    challenge
) => {
    requireWasmInitialized();
    return wasm.bbsGenProofOfKnowledgeOfSignature(protocol, challenge);
};

module.exports.bbsVerifyProofOfKnowledgeOfSignature = (
    proof,
    revealedMessages,
    challenge,
    publicKey,
    params,
    encodeMessages
) => {
    requireWasmInitialized();
    return wasm.bbsVerifyProofOfKnowledgeOfSignature(proof, revealedMessages, challenge, publicKey, params, encodeMessages);
};

module.exports.bbsChallengeContributionFromProtocol = (
    protocol,
    revealedMessages,
    params,
    encodeMessages
) => {
    requireWasmInitialized();
    return wasm.bbsChallengeContributionFromProtocol(protocol, revealedMessages, params, encodeMessages);
};

module.exports.bbsChallengeContributionFromProof = (
    proof,
    revealedMessages,
    params,
    encodeMessages
) => {
    requireWasmInitialized();
    return wasm.bbsChallengeContributionFromProof(proof, revealedMessages, params, encodeMessages);
};

module.exports.bbsAdaptSigParamsG1ForMsgCount = (params, generating_label, new_count) => {
    requireWasmInitialized();
    return wasm.bbsAdaptSigParamsG1ForMsgCount(params, generating_label, new_count);
};

module.exports.bbsAdaptSigParamsG2ForMsgCount = (params, generating_label, new_count) => {
    requireWasmInitialized();
    return wasm.bbsAdaptSigParamsG2ForMsgCount(params, generating_label, new_count);
};
