// This ends up pointing to a CJS version of the ES module generated by wasm-pack
// which is done post-compile via rollup

const {
    wasm, requireWasmInitialized
} = require('./init_wasm');

module.exports.saverGenerateEncryptionGenerators = (label) => {
    requireWasmInitialized();
    return wasm.saverGenerateEncryptionGenerators(label);
};

module.exports.saverGenerateChunkedCommitmentGenerators = (label) => {
    requireWasmInitialized();
    return wasm.saverGenerateChunkedCommitmentGenerators(label);
};

module.exports.saverDecryptorSetup = (chunkBitSize, encGens, returnUncompressedSnarkPk) => {
    requireWasmInitialized();
    return wasm.saverDecryptorSetup(chunkBitSize, encGens, returnUncompressedSnarkPk);
};

module.exports.saverDecompressEncryptionGenerators = (encGens) => {
    requireWasmInitialized();
    return wasm.saverDecompressEncryptionGenerators(encGens);
};

module.exports.saverDecompressChunkedCommitmentGenerators = (commGens) => {
    requireWasmInitialized();
    return wasm.saverDecompressChunkedCommitmentGenerators(commGens);
};

module.exports.saverDecompressEncryptionKey = (encryptionKey) => {
    requireWasmInitialized();
    return wasm.saverDecompressEncryptionKey(encryptionKey);
};

module.exports.saverDecompressDecryptionKey = (decryptionKey) => {
    requireWasmInitialized();
    return wasm.saverDecompressDecryptionKey(decryptionKey);
};

module.exports.saverDecompressSnarkPk = (snarkPk) => {
    requireWasmInitialized();
    return wasm.saverDecompressSnarkPk(snarkPk);
};

module.exports.saverGetSnarkVkFromPk = (snarkPk, returnUncompressed) => {
    requireWasmInitialized();
    return wasm.saverGetSnarkVkFromPk(snarkPk, returnUncompressed);
};

module.exports.saverDecompressSnarkVk = (snarkVk) => {
    requireWasmInitialized();
    return wasm.saverDecompressSnarkVk(snarkVk);
};

module.exports.saverDecryptCiphertextUsingSnarkPk = (ciphertext, secretKey, decryptionKey, snarkPk, chunkBitSize, uncompressedPublicParams) => {
    requireWasmInitialized();
    return wasm.saverDecryptCiphertextUsingSnarkPk(ciphertext, secretKey, decryptionKey, snarkPk, chunkBitSize, uncompressedPublicParams);
};

module.exports.saverDecryptCiphertextUsingSnarkVk = (ciphertext, secretKey, decryptionKey, snarkVk, chunkBitSize, uncompressedPublicParams) => {
    requireWasmInitialized();
    return wasm.saverDecryptCiphertextUsingSnarkVk(ciphertext, secretKey, decryptionKey, snarkVk, chunkBitSize, uncompressedPublicParams);
};

module.exports.saverVerifyDecryptionUsingSnarkPk = (ciphertext, message, nu, decryptionKey, snarkPk, encGens, chunkBitSize, uncompressedPublicParams) => {
    requireWasmInitialized();
    return wasm.saverVerifyDecryptionUsingSnarkPk(ciphertext, message, nu, decryptionKey, snarkPk, encGens, chunkBitSize, uncompressedPublicParams);
};

module.exports.saverVerifyDecryptionUsingSnarkVk = (ciphertext, message, nu, decryptionKey, snarkVk, encGens, chunkBitSize, uncompressedPublicParams) => {
    requireWasmInitialized();
    return wasm.saverVerifyDecryptionUsingSnarkVk(ciphertext, message, nu, decryptionKey, snarkVk, encGens, chunkBitSize, uncompressedPublicParams);
};
